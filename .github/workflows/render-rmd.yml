name: Render Entire Project

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  render:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Install Quarto
        run: |
          curl -sSL https://github.com/quarto-dev/quarto-cli/releases/download/v1.5.56/quarto-1.5.56-linux-amd64.deb -o quarto.deb
          sudo dpkg -i quarto.deb
          sudo apt-get install -f

      - name: Install Quarto webr Extension
        run: |
          quarto add coatless/quarto-webr --no-prompt

      - name: Install R Packages (for Quarto Rendering and pkgdown)
        run: |
          R -e "install.packages(c('knitr', 'rmarkdown', 'dplyr', 'ggplot2', 'tidyr', 'openintro', 'pkgdown'), dependencies=TRUE)"

      - name: Verify R Package Installation
        run: |
          R -e "installed.packages()"

      - name: List All Files
        run: |
          echo "Files to process:"
          find . -type f -not -path "./rendered_output/*" -not -path "./.git/*" -not -name "*.html" -ls || echo "No files found"

      - name: Render Markdown and Quarto Files, Copy Others
        run: |
          mkdir -p rendered_output
          find . -type f -not -path "./rendered_output/*" -not -path "./.git/*" -not -name "*.html" | while read -r file; do
            if [ -f "$file" ]; then
              mkdir -p "rendered_output/$(dirname "$file")"
              if [[ "$file" == *.qmd ]]; then
                echo "Rendering Quarto file $file..."
                quarto render "$file" --output-dir "rendered_output/$(dirname "$file")"
                if [ $? -ne 0 ]; then
                  echo "Failed to render $file"
                  exit 1
                fi
              elif [[ "$file" == *.md && "$file" != *README.md && "$file" != *CODE_OF_CONDUCT.md && "$file" != *LICENSE.md ]]; then
                echo "Rendering Markdown file $file..."
                quarto render "$file" --output-dir "rendered_output/$(dirname "$file")"
                if [ $? -ne 0 ]; then
                  echo "Failed to render $file"
                  exit 1
                fi
              else
                echo "Copying $file..."
                cp "$file" "rendered_output/$file"
              fi
            else
              echo "No files found in project"
            fi
          done
        env:
          QUARTO_LOG_LEVEL: DEBUG

      - name: Build pkgdown Site
        run: |
          R -e "pkgdown::build_site(dest = 'rendered_output/docs')"
        env:
          R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

      - name: Debug Render Failure
        if: failure()
        run: |
          ls -la rendered_output/ || echo "No rendered_output directory"
          find . -name "*.log" -exec cat {} \;  # Look for Quarto logs

      - name: Deploy Entire Project to GitHub Pages
        if: success() && github.event_name != 'pull_request'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: rendered_output
          clean: true

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error:: Project rendering failed! Check logs in GitHub Actions."
